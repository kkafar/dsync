// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LocalFileDescription {
    #[prost(string, tag = "1")]
    pub local_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub file_path: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub hash_sha1: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ListLocalFilesRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListLocalFilesResponse {
    #[prost(message, repeated, tag = "1")]
    pub file_descs: ::prost::alloc::vec::Vec<LocalFileDescription>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileAddRequest {
    #[prost(string, tag = "1")]
    pub file_path: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub group_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FileAddResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileRemoveRequest {
    #[prost(string, tag = "1")]
    pub file_path: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub group_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FileRemoveResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileListRequest {
    #[prost(string, optional, tag = "1")]
    pub remote_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub group_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileListResponse {
    #[prost(message, repeated, tag = "1")]
    pub file_list: ::prost::alloc::vec::Vec<LocalFileDescription>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HostListRequest {
    #[prost(bool, tag = "1")]
    pub discover: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HostListResponse {
    #[prost(message, repeated, tag = "1")]
    pub host_list: ::prost::alloc::vec::Vec<super::shared::ServerInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HostDiscoverRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HostDiscoverResponse {
    #[prost(message, repeated, tag = "1")]
    pub host_list: ::prost::alloc::vec::Vec<super::shared::ServerInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupCreateRequest {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GroupCreateResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupDeleteRequest {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GroupDeleteResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupListRequest {
    #[prost(string, optional, tag = "1")]
    pub remote_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GroupListResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ListHostsRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListHostsResponse {
    #[prost(message, repeated, tag = "1")]
    pub servers_info: ::prost::alloc::vec::Vec<super::shared::ServerInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DiscoverHostsRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiscoverHostsResponse {
    #[prost(message, repeated, tag = "1")]
    pub servers_info: ::prost::alloc::vec::Vec<super::shared::ServerInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddFileRequest {
    #[prost(string, repeated, tag = "1")]
    pub file_path: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddFileResponse {}
/// Generated client implementations.
pub mod user_agent_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct UserAgentServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl UserAgentServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> UserAgentServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> UserAgentServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            UserAgentServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn file_add(
            &mut self,
            request: impl tonic::IntoRequest<super::FileAddRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FileAddResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user_agent.UserAgentService/FileAdd",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("user_agent.UserAgentService", "FileAdd"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn file_remove(
            &mut self,
            request: impl tonic::IntoRequest<super::FileRemoveRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FileRemoveResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user_agent.UserAgentService/FileRemove",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("user_agent.UserAgentService", "FileRemove"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn file_list(
            &mut self,
            request: impl tonic::IntoRequest<super::FileListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FileListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user_agent.UserAgentService/FileList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("user_agent.UserAgentService", "FileList"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn host_list(
            &mut self,
            request: impl tonic::IntoRequest<super::HostListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HostListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user_agent.UserAgentService/HostList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("user_agent.UserAgentService", "HostList"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn host_discover(
            &mut self,
            request: impl tonic::IntoRequest<super::HostDiscoverRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HostDiscoverResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user_agent.UserAgentService/HostDiscover",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("user_agent.UserAgentService", "HostDiscover"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn group_create(
            &mut self,
            request: impl tonic::IntoRequest<super::GroupCreateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GroupCreateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user_agent.UserAgentService/GroupCreate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("user_agent.UserAgentService", "GroupCreate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn group_delete(
            &mut self,
            request: impl tonic::IntoRequest<super::GroupDeleteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GroupDeleteResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user_agent.UserAgentService/GroupDelete",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("user_agent.UserAgentService", "GroupDelete"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn group_list(
            &mut self,
            request: impl tonic::IntoRequest<super::GroupListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GroupListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user_agent.UserAgentService/GroupList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("user_agent.UserAgentService", "GroupList"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod user_agent_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with UserAgentServiceServer.
    #[async_trait]
    pub trait UserAgentService: std::marker::Send + std::marker::Sync + 'static {
        async fn file_add(
            &self,
            request: tonic::Request<super::FileAddRequest>,
        ) -> std::result::Result<tonic::Response<super::FileAddResponse>, tonic::Status>;
        async fn file_remove(
            &self,
            request: tonic::Request<super::FileRemoveRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FileRemoveResponse>,
            tonic::Status,
        >;
        async fn file_list(
            &self,
            request: tonic::Request<super::FileListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FileListResponse>,
            tonic::Status,
        >;
        async fn host_list(
            &self,
            request: tonic::Request<super::HostListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HostListResponse>,
            tonic::Status,
        >;
        async fn host_discover(
            &self,
            request: tonic::Request<super::HostDiscoverRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HostDiscoverResponse>,
            tonic::Status,
        >;
        async fn group_create(
            &self,
            request: tonic::Request<super::GroupCreateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GroupCreateResponse>,
            tonic::Status,
        >;
        async fn group_delete(
            &self,
            request: tonic::Request<super::GroupDeleteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GroupDeleteResponse>,
            tonic::Status,
        >;
        async fn group_list(
            &self,
            request: tonic::Request<super::GroupListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GroupListResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct UserAgentServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> UserAgentServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for UserAgentServiceServer<T>
    where
        T: UserAgentService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/user_agent.UserAgentService/FileAdd" => {
                    #[allow(non_camel_case_types)]
                    struct FileAddSvc<T: UserAgentService>(pub Arc<T>);
                    impl<
                        T: UserAgentService,
                    > tonic::server::UnaryService<super::FileAddRequest>
                    for FileAddSvc<T> {
                        type Response = super::FileAddResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FileAddRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UserAgentService>::file_add(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FileAddSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user_agent.UserAgentService/FileRemove" => {
                    #[allow(non_camel_case_types)]
                    struct FileRemoveSvc<T: UserAgentService>(pub Arc<T>);
                    impl<
                        T: UserAgentService,
                    > tonic::server::UnaryService<super::FileRemoveRequest>
                    for FileRemoveSvc<T> {
                        type Response = super::FileRemoveResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FileRemoveRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UserAgentService>::file_remove(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FileRemoveSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user_agent.UserAgentService/FileList" => {
                    #[allow(non_camel_case_types)]
                    struct FileListSvc<T: UserAgentService>(pub Arc<T>);
                    impl<
                        T: UserAgentService,
                    > tonic::server::UnaryService<super::FileListRequest>
                    for FileListSvc<T> {
                        type Response = super::FileListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FileListRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UserAgentService>::file_list(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FileListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user_agent.UserAgentService/HostList" => {
                    #[allow(non_camel_case_types)]
                    struct HostListSvc<T: UserAgentService>(pub Arc<T>);
                    impl<
                        T: UserAgentService,
                    > tonic::server::UnaryService<super::HostListRequest>
                    for HostListSvc<T> {
                        type Response = super::HostListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HostListRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UserAgentService>::host_list(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HostListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user_agent.UserAgentService/HostDiscover" => {
                    #[allow(non_camel_case_types)]
                    struct HostDiscoverSvc<T: UserAgentService>(pub Arc<T>);
                    impl<
                        T: UserAgentService,
                    > tonic::server::UnaryService<super::HostDiscoverRequest>
                    for HostDiscoverSvc<T> {
                        type Response = super::HostDiscoverResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HostDiscoverRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UserAgentService>::host_discover(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HostDiscoverSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user_agent.UserAgentService/GroupCreate" => {
                    #[allow(non_camel_case_types)]
                    struct GroupCreateSvc<T: UserAgentService>(pub Arc<T>);
                    impl<
                        T: UserAgentService,
                    > tonic::server::UnaryService<super::GroupCreateRequest>
                    for GroupCreateSvc<T> {
                        type Response = super::GroupCreateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GroupCreateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UserAgentService>::group_create(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GroupCreateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user_agent.UserAgentService/GroupDelete" => {
                    #[allow(non_camel_case_types)]
                    struct GroupDeleteSvc<T: UserAgentService>(pub Arc<T>);
                    impl<
                        T: UserAgentService,
                    > tonic::server::UnaryService<super::GroupDeleteRequest>
                    for GroupDeleteSvc<T> {
                        type Response = super::GroupDeleteResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GroupDeleteRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UserAgentService>::group_delete(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GroupDeleteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user_agent.UserAgentService/GroupList" => {
                    #[allow(non_camel_case_types)]
                    struct GroupListSvc<T: UserAgentService>(pub Arc<T>);
                    impl<
                        T: UserAgentService,
                    > tonic::server::UnaryService<super::GroupListRequest>
                    for GroupListSvc<T> {
                        type Response = super::GroupListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GroupListRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UserAgentService>::group_list(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GroupListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for UserAgentServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "user_agent.UserAgentService";
    impl<T> tonic::server::NamedService for UserAgentServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
